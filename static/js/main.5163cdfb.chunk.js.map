{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","reportWebVitals.js","index.js"],"names":["NavBar","totalCounters","className","Counter","this","getBadgeClasses","formatCount","onClick","props","onIncrement","counter","onDelete","classes","value","count","Component","Counters","onReset","counters","map","id","App","state","handleIncrement","index","indexOf","setState","handleDelete","counterId","filter","c","handleReset","Fragment","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+PAeeA,G,MAbA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAChB,OACE,qBAAKC,UAAU,+BAAf,SACE,oBAAGA,UAAU,eAAb,kBACQ,IACN,sBAAMA,UAAU,mCAAhB,SACGD,WC2BIE,E,uKAhCH,IAAD,OACP,OACE,gCACE,sBAAMD,UAAWE,KAAKC,kBAAtB,SAA0CD,KAAKE,gBAC/C,wBACEC,QAAS,kBAAM,EAAKC,MAAMC,YAAY,EAAKD,MAAME,UACjDR,UAAU,2BAFZ,uBAMA,wBACEK,QAAS,kBAAM,EAAKC,MAAMG,SAAS,EAAKH,MAAME,UAC9CR,UAAU,4BAFZ,yB,wCAWJ,IAAIU,EAAU,mBAEd,OADAA,GAAwC,IAA7BR,KAAKI,MAAME,QAAQG,MAAc,UAAY,Y,oCAI3C,IACEC,EAAUV,KAAKI,MAAME,QAA5BG,MACR,OAAiB,IAAVC,EAAc,sCAAgBA,M,GA7BnBC,aCsBPC,E,uKApBH,IAAD,EAC8CZ,KAAKI,MAAlDS,EADD,EACCA,QAASC,EADV,EACUA,SAAUP,EADpB,EACoBA,SAAUF,EAD9B,EAC8BA,YACrC,OACE,gCACE,wBAAQF,QAASU,EAASf,UAAU,6BAApC,mBAGCgB,EAASC,KAAI,SAACT,GAAD,OACZ,cAAC,EAAD,CAEEC,SAAUA,EACVF,YAAaA,EACbC,QAASA,GAHJA,EAAQU,c,GAVFL,aCiDRM,E,4MA/CbC,MAAQ,CACNJ,SAAU,CACR,CAAEE,GAAI,EAAGP,MAAO,GAChB,CAAEO,GAAI,EAAGP,MAAO,GAChB,CAAEO,GAAI,EAAGP,MAAO,GAChB,CAAEO,GAAI,EAAGP,MAAO,K,EAGpBU,gBAAkB,SAACb,GACjB,IAAMQ,EAAQ,YAAO,EAAKI,MAAMJ,UAC1BM,EAAQN,EAASO,QAAQf,GAC/BQ,EAASM,GAAT,eAAuBd,GACvBQ,EAASM,GAAOX,QAChB,EAAKa,SAAS,CAAER,c,EAElBS,aAAe,SAACC,GACd,IAAMV,EAAW,EAAKI,MAAMJ,SAASW,QAAO,SAACC,GAAD,OAAOA,EAAEV,KAAOQ,KAC5D,EAAKF,SAAS,CAAER,SAAUA,K,EAG5Ba,YAAc,WACZ,IAAMb,EAAW,EAAKI,MAAMJ,SAASC,KAAI,SAACW,GAExC,OADAA,EAAEjB,MAAQ,EACHiB,KAET,EAAKJ,SAAS,CAAER,c,uDAIhB,OACE,eAAC,IAAMc,SAAP,WACE,cAAC,EAAD,CACE/B,cAAeG,KAAKkB,MAAMJ,SAASW,QAAO,SAACC,GAAD,OAAOA,EAAEjB,MAAQ,KAAGoB,SAEhE,sBAAM/B,UAAU,YAAhB,SACE,cAAC,EAAD,CACEgB,SAAUd,KAAKkB,MAAMJ,SACrBD,QAASb,KAAK2B,YACdtB,YAAaL,KAAKmB,gBAClBZ,SAAUP,KAAKuB,wB,GAxCTZ,aCQHmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SAKjDZ,M","file":"static/js/main.5163cdfb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nconst NavBar = ({ totalCounters }) => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\">\r\n        BRAND{\" \"}\r\n        <span className=\"badge badge-pill badge-secondary\">\r\n          {totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          className=\"btn btn-secondary btn-sm\"\r\n        >\r\n          Increment\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter)}\r\n          className=\"btn btn-danger btn-sm m-2\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  getBadgeClasses() {\r\n    let classes = \"badge m-2 badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n\r\n  formatCount() {\r\n    const { value: count } = this.props.counter;\r\n    return count === 0 ? <h1>ZERO</h1> : count;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\n\r\nclass Counters extends Component {\r\n  render() {\r\n    const { onReset, counters, onDelete, onIncrement } = this.props;\r\n    return (\r\n      <div>\r\n        <button onClick={onReset} className=\"btn btn-primary btn-sm m-2\">\r\n          Reset\r\n        </button>\r\n        {counters.map((counter) => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={onDelete}\r\n            onIncrement={onIncrement}\r\n            counter={counter}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import \"./App.css\";\nimport React, { Component } from \"react\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nclass App extends Component {\n  state = {\n    counters: [\n      { id: 1, value: 0 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleDelete = (counterId) => {\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    this.setState({ counters: counters });\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n        />\n        <main className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}